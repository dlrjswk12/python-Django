package ch04_mock1_direct_create;
/**
 * 
 * 어플리케이션플리케이션을 개발하다보면,

	테스트 대상 코드가 다른 클래스에 종속되어 있을 때가 종종 있다. 그 클래스가 다시 다른 클래스에 종속되고, 
	역시 또 다른 클래스에 종속되기도 한다. 	JDBC를 통해 데이터베이스에 의존하는 JAVA EE 애플리케이션, 
	파일 시스템을 사용하는 어플리케이션, HTTP나 SOAP 등의 프로토콜로 외부 리소스에 접근하는 어플리케이션들을 
	예로 들 수 있다. 특정 런타임 환경에 의존적인 어플리케이션을 단위 테스트하는 것은 꽤나 고된 일이다.
	테스트는 안정적이어야 하고, 반복적으로 수행해도 매번 동일한 결과를 내야 한다. 따라서 테스트를 올바로 수행하기 
	위해서는 환경을 제어할 수 있어야 한다. 	예를 들어 다른 회사에 제공하는 웹 서버에 HTTP 커넥션을 맺는 어플리케이션을 
	제작하는 경우 그 외부 서버를 개발 환경 안에 가져올 수 없다. 테스트를 작성하고 돌려 보려면, 결국 서버를 시뮬레이션하는
	방법이 필요하다. 	또는 팀 단위 프로젝트에서 내가 맡은 부분을 테스트해보려 할때 다른 부분이 아직 준비되지 않았다면... 
	가짜를 만들어 미처 준비되지 못한 부분을 시뮬레이션할 수 있다. 이 처럼 가짜 객체를 제공하는 테스트 방식으로 목 객체를 
	사용할 수 있다.(스텁방식도 있다.)
	
 * 계좌 송금 프로세스를 기능 테스트 하기 위해서는 AccountService를 테스트 하기 위해서는 
 * 우선 데이터베이스를 세팅한 후 테스트 데이터를 채워넣는 작업을 진행하여야 한다. 
 * 목 객체를 활용하면 아직 작성되지 않은 코드를 테스트할 수 있다. 단 인터페이스가 정의되어 있어야 한다.
 
  
 * Account.java  - 계좌 ID와 잔고를 갖는 Account 객체
 * AccountManager.java  - Account 객체의 생명주기와 영속성을 관리한다.
 * AccountService.java - 두 계정 사이의 송금 기능을 제공한다. ID로 돈을 찾을 계좌와 받을 계좌를 찾고 
 * 정보를 갱신하기 AccountManager 인터페이스를 활용한다. (DI)
 * MockAccountManager.java - AccountService.transfer 메서드를 단위 테스트하고자 하므로 이를 위해 
 * AccountManger 인터페이스의 목 객체를 구현해야 한다.
 * TestAccountService.java - MockAccountManger를 이용하여 transfer 테스트하기
 *
 */
public class Orientation_Mock {}